/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
private:
    ListNode * fcd(ListNode * head){
        
        if(head == NULL) return NULL;

        ListNode * fast = head;
        ListNode * slow = head;
        while(slow != NULL && fast != NULL){
            fast = fast->next;
            if(fast != NULL){
                fast = fast->next;
            }

            slow = slow->next;

            if(fast == slow){
                return slow;
            }
        }
        return NULL;
    }
public:
    ListNode *detectCycle(ListNode *head) {
        if(head == NULL) return NULL;

    ListNode * pointofintersection = fcd(head);

    if(pointofintersection == NULL){
        return NULL;
    }

    ListNode * slow = head;
    
    while(slow != pointofintersection){
        slow=slow->next;
        pointofintersection=pointofintersection->next;
    }

    return slow;
    }
};
