//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

void printList(Node* node) {
    while (node != NULL) {
        cout << node->data % 10;
        node = node->next;
    }
    cout << "\n";
}


// } Driver Code Ends
// User function template for C++

/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  private:
  Node * reverse(Node * head){
      Node * curr = head;
      Node * prev = NULL;
      Node * fwd = head;
      while(curr!=NULL){
          fwd = curr->next;
          curr->next = prev;
          prev = curr;
          curr = fwd;
      }
      
      return prev;
  }
  
  Node * sum(Node * h1, Node * h2){
      Node * head = NULL, * tail = NULL;
      h1 = reverse(h1);
      h2 = reverse(h2);
      
      int carry = 0;
      while(h1 != NULL || h2 != NULL || carry != 0){
          int sum = carry;
          if(h1!=NULL){
              sum+=h1->data;
              h1=h1->next;
          }
          
          if(h2!=NULL){
              sum+=h2->data;
              h2=h2->next;
          }
          
          Node * temp = new Node(sum%10);
          carry = sum/10;
          
          if(head == NULL){
              head = temp;
              tail = temp;
          }else{
              tail->next = temp;
              tail = temp;
          }
          
      }
      
      return reverse(head);
  }
  
  public:
    Node* addOne(Node* head) {
        // Your Code here
        // return head of list after adding one
        Node * one = new Node(1);
        return sum(head,one);
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        if (arr.empty()) {
            cout << -1 << endl;
            continue;
        }

        int data = arr[0];
        struct Node* head = new Node(data);
        struct Node* tail = head;
        for (int i = 1; i < arr.size(); ++i) {
            data = arr[i];
            tail->next = new Node(data);
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head);
    }
    return 0;
}

// } Driver Code Ends
