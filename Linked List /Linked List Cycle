/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        // map<ListNode*,bool> mp;
        // ListNode * temp = head;
        // while(temp != NULL){
        //     if(mp[temp] == true){
        //         return true;
        //     }

        //     mp[temp] = true;
        //     temp=temp->next;
        // }

        // return false;
        
        if(head == NULL || head->next == NULL) return false;

        ListNode * fast = head;
        ListNode * slow = head;
        while(slow != NULL && fast != NULL){
            fast = fast->next;
            if(fast != NULL){
                fast = fast->next;
            }

            slow = slow->next;

            if(fast == slow){
                return true;
            }
        }
        return false;
    }
};
