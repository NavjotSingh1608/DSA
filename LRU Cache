class Node {
public:
    int key, value;
    Node* next;
    Node* prev;

    Node(int key, int value) {
        this->key = key;
        this->value = value;
        this->next = NULL;
        this->prev = NULL;
    }
};

class LRUCache {
public:
    map<int, Node*> mpp;
    int capacity;
    Node* head;
    Node* tail;

    LRUCache(int capacity) {
        this->capacity = capacity;
        mpp.clear();
        head = new Node(-1, -1);
        tail = new Node(-1, -1);
        head->next = tail;
        tail->prev = head;
    }

    void addNode(Node* newnode) {
        Node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }

    void deleteNode(Node* delnode) {
        Node* delprev = delnode->prev;
        Node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }

    int get(int key) {
        if (mpp.find(key) != mpp.end()) {
            Node* Node = mpp[key];
            deleteNode(Node);
            addNode(Node);
            return Node->value;
        } else {
            return -1;
        }
    }

    void put(int key, int value) {
        if (mpp.find(key) != mpp.end()) {
            Node* existingNode = mpp[key];
            existingNode->value = value;
            deleteNode(existingNode);
            addNode(existingNode);
        } else {
            if (mpp.size() == capacity) {
                mpp.erase(tail->prev->key);
                deleteNode(tail->prev);
            }
            Node* newNode = new Node(key, value);
            addNode(newNode);
            mpp[key] = newNode;
        }
    }
};
