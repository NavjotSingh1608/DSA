Problem link : https://www.geeksforgeeks.org/problems/path-with-minimum-effort/1
Problem Statement : Path with minimum effort
Time Complexity : ElogV


#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    int MinimumEffort(vector<vector<int>>& heights) {
        // Code here
        priority_queue< pair<int,pair<int,int>> , vector<pair<int,pair<int,int>> > , greater<pair<int,pair<int,int>>> > pq;
        
        int n=heights.size(),m=heights[0].size();
        vector<vector<int>> dist(n,vector<int>(m,1e9));
        dist[0][0] = 0;
        pq.push({0,{0,0}});
        
        int dx[]={-1,0,1,0};
        int dy[]={0,1,0,-1};
        
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            
            int diff = it.first;
            int r = it.second.first;
            int c = it.second.second;
            
            if(r == n-1 && c == m-1) return diff;
            
            for(int i=0;i<4;i++){
                int newr = r + dx[i];
                int newc = c + dy[i];
                
                if(newr>=0 and newr<n and newc>=0 and newc<m){
                    int effort = max(abs(heights[r][c] - heights[newr][newc]),diff);
                    if(effort < dist[newr][newc]){
                        dist[newr][newc] = effort;
                        pq.push({effort,{newr,newc}});
                    }
                }
            }
            
        }
        
        return 0;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n,m; cin>>n>>m;
        vector<vector<int>> heights;
       
        for(int i=0; i<n; ++i){
            vector<int> temp;
            for(int j=0; j<m; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            heights.push_back(temp);
        }
       
        Solution obj;
        cout<<obj.MinimumEffort(heights)<<"\n";
    }
    return 0;
}
