// Implement Dijkstra's
// Problem link : https://bit.ly/3KeZZ7j
// Using Priority Queue
// Time Complexity : O(ElogV)
// Time Complexity : O(V+E)

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    // v => no of vertex
    // adj => adjacency matrix with pair values of which first value is vertex and second value is weight
    // s => source node
    
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int,int> , vector<pair<int,int>> , greater<pair<int,int>> > pq;
        vector<int> dist(V,1e9) ; // create a distance matrix with maximum values

        dist[S]=0;
        pq.push({0,S});

        while(!pq.empty()){
            int node = pq.top().second;
            int distance = pq.top().first;

            pq.pop();

            for(auto it: adj[node]){
                int nodes = it[0],weight = it[1];

                if(weight+distance < dist[nodes]){
                    pq.push({weight+distance,nodes});
                    dist[nodes] = weight+distance;
                }
            }

        }
        return dist;
    }
};

int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        int S;
        cin>>S;
        
        Solution obj;
    	vector<int> res = obj.dijkstra(V, adj, S);
    	
    	for(int i=0; i<V; i++)
    	    cout<<res[i]<<" ";
    	cout<<endl;
    }

    return 0;
}
